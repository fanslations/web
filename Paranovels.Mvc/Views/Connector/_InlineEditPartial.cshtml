@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model InlineEditForm<ConnectorDetail>
@{
    Layout = null;
}
@if (!User.Identity.IsAuthenticated)
{
    Html.RenderPartial("_InlineEditorUnauthorizedPartial");
    return;
}

<div id="@(Model.InlineEditProperty)Container" class="inline-editor">
    <form id="@(Model.InlineEditProperty)Form" method="post" action="@Url.Action("Form")" enctype="multipart/form-data">
        <div class="form-group">
            @if (Model.Model.ConnectorType == R.ConnectorType.SERIES_GROUP && Model.InlineEditProperty == Model.PropertyName(m => m.Model.TargetID))
            {
                <script>
                    require(['jquery', 'selectize'], function ($, selectize) {
                        'use strict';

                        $('#groupid').selectize({
                            valueField: 'GroupID',
                            labelField: 'Name',
                            searchField: 'Name',
                            sortField: 'Name',
                            preload: true,
                            create: function (input, callback) {
                                window.location = '@Url.Action("Index","Group",new { Do = "add" })' + '&Name=' + input + '&ReturnUrl=@Request.UrlReferrer.PathAndQuery';
                            },
                            render: {
                                option: function (item, escape) {
                                    return '<div>' +
                                        '<strong class="title">' + item.Name + '</strong>' +
                                        '<p class="description">' + escape(item.Url) + '</p>' +
                                        '</div>';
                                }
                            },
                            load: function (query, callback) {

                                $.ajax({
                                    url: '/query/groups?query=' + encodeURIComponent(query),
                                    type: 'GET',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res);
                                    }
                                });
                            }
                        });
                    });
                </script>
                <label for="groupid" class="sr-only">Select Group</label>
                <select id="groupid" name="@Model.InlineEditProperty" placeholder="Select Group" required></select>

            }
            @if (Model.Model.ConnectorType == R.ConnectorType.SERIES_FEED && Model.InlineEditProperty == Model.PropertyName(m => m.Model.TargetID))
            {
                <label for="@Model.InlineEditProperty" class="sr-only">Rss Feed Url</label>
                <input id="@Model.InlineEditProperty" type="url" class="form-control" name="@Model.InlineEditProperty" value="" required />
            }
            else
            {
                <p class="alert alert-danger">Property undefined.</p>
            }
        </div>
        <div class="hidden">
            <input type="hidden" name="ID" value="@Model.ID" />
            <input type="hidden" name="InlineEditProperty" value="@Model.InlineEditProperty" />
            <input type="hidden" name="ReturnUrl" value="@Request.UrlReferrer.PathAndQuery" />
        </div>
        <div class="form-group clearfix">
            <button id="@(Model.InlineEditProperty)Submit" type="submit" class="btn btn-primary"><i class="fa fa-save"></i>Save</button>
            <button id="@(Model.InlineEditProperty)Cancel" type="button" class="btn btn-default"><i class="fa fa-times-circle"></i>Cancel</button>
        </div>
    </form>
    @if (User.IsAdministrator())
    {
        <form id="@(Model.InlineEditProperty)FormDelete" method="post" action="@Url.Action("Form")" enctype="multipart/form-data" class="text-right">
            <div class="hidden">
                <input type="hidden" name="ID" value="@Model.ID" />
                <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m => m.Model.IsDeleted)" />
                <input type="hidden" name="@Model.PropertyName(m => m.Model.IsDeleted)" value="true" />
                <input type="hidden" name="ReturnUrl" value="@Request.UrlReferrer.PathAndQuery" />
            </div>
            <button id="@(Model.InlineEditProperty)Delete" type="submit" class="btn btn-danger" onclick=" return confirm('Are you sure?'); "><i class="fa fa-trash"></i>Delete</button>
        </form>
    }
</div>