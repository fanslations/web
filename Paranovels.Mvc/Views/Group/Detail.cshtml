@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model GroupDetail
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var tab = Request.QueryString["Tab"] ?? "Comments";

    var feedColorMapper = new Dictionary<int, string>
    {
        {R.FeedStatus.ACTIVE, "green"},
        {R.FeedStatus.INACTIVE, "orange"},
        {R.FeedStatus.DEAD, "red"},
        {R.FeedStatus.PENDING, "gray"},
    };
}
<section class="section">
    <div class="header">
        <a href="@Url.Action("Index")" class="action left"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @Model.Name
        </h1>
    </div>
    <div class="content">
        <div class="detail-group">
            <strong>Group Name</strong>
            <div>
                @Model.Name
                @Html.ImproveThis(m => m.Name)
            </div>
        </div>
        <div class="detail-group">
            <strong>Updated Date</strong>
            <div>@Model.UpdatedDate.FormatDate()</div>
        </div>
        <div class="detail-group">
            <strong>Status</strong>
            <div>
                @Model.Status.Translate(R.GroupStatus.Translate)
                @Html.ImproveThis(m => m.Status)
            </div>
        </div>
        <div class="detail-group">
            <strong>Rating</strong>
            <div>@RatingHelper.DisplayRating(Model.Summarize)</div>
        </div>
        <div class="detail-group">
            <strong>Latest Releases</strong>
            <div>
                <ul class="list-unstyled">
                    @if (!Model.Releases.Any())
                    {
                        <li>
                            There is no release yet! <a class="" href="@Url.Action("Index", "Release", new { Do = "add", SeriesID = Model.ID })">Click to <i class="fa fa-plus-circle"></i>submit new release.</a>
                        </li>
                    }
                    @foreach (var release in Model.Releases.OrderByDescending(o => o.Date).Take(5))
                    {
                        var series = Model.Series.SingleOrDefault(w => w.ID == release.SeriesID) ?? new Series();
                        <li>
                            <span>@release.Date.FormatDate()</span> - 
                            <a href="@Url.Action("Detail", "Release", new {ID = release.ID, Seo = release.Title.ToSeo()})">@series.Title @release.Title.ExtractVolumeChapter()</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="detail-group">
            <strong>Release Frequency</strong>
            <div>
                @{
                    const int DAYS = 30;
                    var total = Model.Releases.Count(w => w.Date > DateTime.Now.AddDays(DAYS * -1));
                    var releaseFrequency = (double)DAYS / total;
                }

                @(releaseFrequency > 1 ? string.Format("About every {0:0.0} day(s) based on last {1} days", releaseFrequency, DAYS) : string.Format("About every {0:0.0} hours(s) based on last {1} days", releaseFrequency * 24, DAYS))
            </div>
        </div>
        <div class="detail-group">
            <strong>Day(s) of Release</strong>
            <div>
                @{
                    var daysOfRelease = Model.Releases.Where(w => w.Date > DateTime.Now.AddDays(DAYS * -1)).GroupBy(o => o.Date.DayOfWeek).OrderByDescending(o => o.Count()).Select(s => s.Key).ToList();

                }
                @string.Join(", ", daysOfRelease)
            </div>
        </div>
        <div class="detail-group">
            <strong>Website</strong>
            <div>
                @if (string.IsNullOrWhiteSpace(Model.Url))
                {
                    Html.Raw(Model.Url.FormatString());
                }
                else
                {
                    <a href="@Model.Url" target="_blank">@Model.Url<i class="fa fa-external-link right"></i></a>
                }
                @Html.ImproveThis(m => m.Url)
            </div>
        </div>
        <div class="detail-group">
            <strong>Rss Feed</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    <li>
                        @Html.Raw(Model.Feeds.Count > 0 ? "" : "No rss feed available. Help us add a rss feed and track this group.")
                        @foreach (var item in Model.Feeds)
                        {
                            <ul class="list-unstyled">
                                <li>
                                    <i class="fa fa-circle" style="color: @feedColorMapper[item.Status]" title="last success date @item.LastSuccessDate"></i><a href="@item.Url">@item.Url</a>
                                    @Html.ImproveThis(m => m.Feeds, new Dictionary<string, object> { { "data-posturl", Url.Action("InlineEdit", "Group", new { FeedID = item.ID }) } })
                                </li>
                            </ul>
                        }
                    </li>
                    <li>
                        @Html.ImproveThis(m => m.Feeds, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new rss feed")
                    </li>
                </ul>
            </div>
        </div>
        <div class="detail-group">
            <strong>Additional Information</strong>
            <div>
                @Html.Raw(Model.About.FormatString(int.MaxValue, 0, "No additional information. Click Edit to add additional information."))
                @Html.ImproveThis(m => m.About)
            </div>
        </div>
    </div>
</section>
<section class="section">
    <div class="content">
        <div class="toolbar clearfix">
            <div class="vote-score">
                <div class="vote @(Model.UserAction.Voted.GetValueOrDefault() == 1 ? "likes" : Model.UserAction.Voted.GetValueOrDefault() == -1 ? "dislikes" : "")">
                    <span role="button" class="action vote-up" data-vote='{"SourceID": @Model.ID, "SourceTable": @R.SourceTable.GROUP, "Vote": 1}' title="i like this"><i class="fa fa-thumbs-up"></i></span>
                    <span class="score @((Model.Summarize.VoteUp - Model.Summarize.VoteDown) < 0 ? "dislikes" : "likes")">
                        @(Model.Summarize.VoteUp - Model.Summarize.VoteDown)
                    </span>
                    <span role="button" class="action vote-down" data-vote='{"SourceID": @Model.ID, "SourceTable": @R.SourceTable.GROUP, "Vote": -1}' title="i dislike this"><i class="fa fa-thumbs-down"></i></span>
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-thumbs-up"></i>@Model.Summarize.VoteUp likes
                </div>
                <div>
                    <i class="fa fa-thumbs-down"></i>@Model.Summarize.VoteDown dislikes
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-eye"></i>@Model.Summarize.ViewCount views
                </div>
                <div>
                    <i class="fa fa-check-square-o"></i>@Model.Summarize.ReadCount reads
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-diamond"></i>@RatingHelper.DisplayRating(Model.Summarize)
                </div>
                <div>
                    <i class="fa @(Model.UserAction.QualityRated > 0 ? "fa-star" : "fa-star-o")"></i>@Model.Summarize.QualityCount users rated
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-comments"></i>@Model.Summarize.CommentCount comments
                </div>
 
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-book"></i>@Model.Series.Count() series
                </div>
                <div>
                    <i class="fa fa-rss"></i>@Model.Releases.Count() releases
                </div>
            </div>
        </div>
    </div>
</section>
<section class="section">
    <div class="content">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="@(tab.Equals("Comments",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Comments#tabcontent" aria-controls="tabcontent" role="tab"><i class="fa fa-comments"></i>Comments (@Model.Summarize.CommentCount)</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Series",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Series#tabcontent" aria-controls="tabcontent" role="tab"><i class="fa fa-book"></i>Series (@Model.Series.Count)</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Releases",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Releases#tabcontent" aria-controls="tabcontent" role="tab"><i class="fa fa-rss"></i>Releases (@Model.Releases.Count)</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Glossaries",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Glossaries" aria-controls="tabcontent" role="tab"><i class="fa fa-puzzle-piece"></i>Glossaries (@Model.Glossaries.Count)</a>
            </li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="tabcontent">
                @if (tab.Equals("Comments", StringComparison.OrdinalIgnoreCase))
                {
                    Html.RenderAction("Index", "Comment", new CommentCriteria { SourceID = Model.ID, SourceTable = R.SourceTable.GROUP, Sorted = Request.QueryString["sorted"] });
                }
                @if (tab.Equals("Series", StringComparison.OrdinalIgnoreCase))
                {
                    Html.RenderPartial("~/Views/Series/_SeriesGridPartial.cshtml", new PagedList<SeriesGrid>
                    {
                        Data = Model.Series.Select(s => new SeriesGrid()
                        {
                            ID = s.ID,
                            Title = s.Title,
                            UpdatedDate = s.UpdatedDate,
                            Status = s.Status,
                            Synopsis = s.Synopsis,
                            ImageUrl = s.ImageUrl,
                            Groups = new List<Group>(),
                            UserLists = new List<UserList>(),
                            Connectors = new List<Connector>(),
                            Tags = new List<Tag>(),
                            Releases = Model.Releases.Where(w => w.SeriesID == s.ID).ToList()
                        }).AsQueryable().Sort(new BaseCriteria { Sorted = Request.QueryString["sorted"] }).ToList()
                    });
                }
                @if (tab.Equals("Releases", StringComparison.OrdinalIgnoreCase))
                {
                    Html.RenderPartial("~/Views/Release/_Release.cshtml", new PagedList<ReleaseGrid>
                    {
                        Data = Model.Releases.Select(s => new ReleaseGrid
                        {
                            ID = s.ID,
                            Title = s.Title,
                            Date = s.Date,
                            Url = s.Url,
                            Series = Model.Series.SingleOrDefault(w => w.ID == s.SeriesID),
                            Group = Model,
                            UserLists = new List<UserList>(),
                            Connectors = new List<Connector>(),
                            Tags = new List<Tag>(),
                        }).AsQueryable().Sort(new BaseCriteria { Sorted = Request.QueryString["sorted"] }).ToList()
                    });
                }
                @if (tab.Equals("Glossaries", StringComparison.OrdinalIgnoreCase))
                {
                    Html.RenderPartial("~/Views/Glossary/_GlossaryGridPartial.cshtml", new PagedList<GlossaryGrid>
                    {
                        Data = Model.Glossaries.Select(s => new GlossaryGrid
                        {
                            ID = s.ID,
                            UpdatedDate = s.UpdatedDate,
                            SourceID = s.SourceID,
                            SourceTable = s.SourceTable,
                            Type = s.Type,
                            RawLanguage = s.RawLanguage,
                            Raw = s.Raw,
                            Final = s.Final,
                            Definition = s.Definition
                        }).AsQueryable().Sort(new BaseCriteria { Sorted = Request.QueryString["sorted"] }).ToList()
                    });

                    <div class="well well-sm">
                        @{
                    Html.RenderPartial("~/Views/Glossary/_FormPartial.cshtml", new GlossaryForm
                    {
                        SourceID = Model.ID,
                        SourceTable = R.SourceTable.SERIES,
                    });
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</section>