@using Microsoft.Ajax.Utilities
@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model NovelDetail
@{
    ViewBag.Title = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var tab = Request.QueryString["Tab"] ?? "Toc";
    
    var latestChapter = Model.Chapters.OrderByDescending(o => o.Volume).ThenByDescending(o => o.Number).FirstOrDefault() ?? new Chapter();
}

@section js {
    <script>
        window.pnHooks.push(function () {
            require(['jquery', 'angular', 'marked'], function ($, angular, marked) {
                'use strict';

                $('[data-marked').each(function () {
                    $(this).html(marked('\n\n' + $(this).html())).addClass('animated fadeIn').show();
                    console.log($(this).text());
                    console.log(marked($(this).text()));
                });
            });
        });
    </script>
}
<section class="section">
    <div class="header">
        <a href="@Url.Action("Index")" class="action left"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @Model.Title
        </h1>
    </div>
    <div class="content">
        <div class="detail-group improve-img">
            @if (string.IsNullOrWhiteSpace(Model.ImageUrl))
            {
                @Html.ImproveThis(m => m.ImageUrl, customHtmlIcon: @"<i class="" fa fa-upload""></i>Upload cover image for " + Model.Title)
            }
            else
            {
                <img src="@Model.ImageUrl.ToGoogleDriveImageUrl()" class="center-block img-responsive" title="@Model.Title's cover image" />
                @Html.ImproveThis(m => m.ImageUrl, customHtmlIcon: @"<i class="" fa fa-upload""></i>Edit")
            }
        </div>
        <div class="detail-group">
            <strong class="sr-only">Synopsis</strong>
            <div>
                @Model.Synopsis
                @Html.ImproveThis(m => m.Synopsis)
            </div>
        </div>
        <div class="detail-group">
            <strong>Title</strong>
            <div>
                @Html.Raw(Model.Title.FormatString())
                @Html.ImproveThis(m => m.Title)
            </div>
        </div>
        <div class="detail-group">
            <strong>Status</strong>
            <div>
                @Html.Raw(Model.Status.Translate(R.TranslationStatus.Translate))
                @if (Model.Status == R.TranslationStatus.ACTIVE) { <text>Ongoing</text>}
                @Html.ImproveThis(m => m.Status)
            </div>
        </div>
        <div class="detail-group">
            <strong>Last Updated Date</strong>
            <div>
                @Html.Raw(Model.UpdatedDate.FormatDate())
                @Html.ImproveThis(m => m.UpdatedDate)
            </div>
        </div>
        <div class="detail-group">
            <strong>Volume</strong>
            <div>
                @Html.Raw(Model.Chapters.OrderByDescending(o => o.ID).Select(s => s.Volume).FirstOrDefault().FormatInt())
            </div>
        </div>
        <div class="detail-group">
            <strong>Chapter</strong>
            <div>
                @Html.Raw(Model.Chapters.OrderByDescending(o=>o.ID).Select(s => s.Number).FirstOrDefault().FormatInt())
            </div>
        </div>
        @*<div class="detail-group">
            <strong>Released Date</strong>
            <div>
                @Html.Raw(Model.ReleasedDate.FormatDate())
                @Html.ImproveThis(m => m.ReleasedDate)
            </div>
        </div>*@
        @*@if (Model.Status == R.TranslationStatus.COMPLETED)
        {
            <div class="detail-group">
                <strong>Completed Date</strong>
                <div>
                    @Html.Raw(Model.CompletedDate.FormatDate())
                    @Html.ImproveThis(m => m.CompletedDate)
                </div>
            </div>
        }*@
    </div>
</section>
<section class="section">
    <div class="content">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="@(tab.Equals("Toc", StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Toc" aria-controls="tabpanel" role="tab">Table of contents</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Comments",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Comments" aria-controls="tabpanel" role="tab">Glossary</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Glossaries", StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Glossaries" aria-controls="tabpanel" role="tab">Glossary</a>
            </li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="tabpanel">
                @if (tab.Equals("Toc", StringComparison.OrdinalIgnoreCase))
                {
                    <table class="table table-condensed table-responsive table-hover">
                        <thead>
                            <tr>
                                <th>Vol</th>
                                <th>Ch</th>
                                <th>Chapter Title</th>
                                <th>Date</th>
                                <th>Raw</th>
                                <th>Translate</th>
                                <th>Edit</th>
                                <th>Proofread</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var chapter in Model.Chapters.OrderBy(o => o.Volume).ThenBy(o => o.Number))
                            {
                                var volume = chapter.Volume == 0 ? "" : " Volume " + chapter.Volume;
                                var chapterNumber = chapter.Number == 0 ? "" : " Chapter " + chapter.Number;
                                var chapterTitle = string.IsNullOrWhiteSpace(chapter.Title) ? "" : " - " + chapter.Title;
                                var seo = (Model.Title + volume + chapterNumber + chapterTitle).ToSeo();
                                <tr>
                                    <td>
                                        @chapter.Volume
                                    </td>
                                    <td>
                                        @chapter.Number
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Detail", "Chapter", new {ID = chapter.ID, Seo = seo})">@(chapter.Title.IfNullOrWhiteSpace(null) ?? string.Format(@"Volume {0} Chapter {1}", chapter.Volume, chapter.Number))</a>
                                    </td>
                                    <td>
                                        @Html.Raw(chapter.InsertedDate.FormatDate())
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Cleaning", "Chapter", new {ID = chapter.ID, Seo = seo})">Clean</a>
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Translating", "Chapter", new {ID = chapter.ID, Seo = seo})">Translate</a>
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Editing", "Chapter", new {ID = chapter.ID, Seo = seo})">Edit</a>
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Proofreading", "Chapter", new {ID = chapter.ID, Seo = seo})">Proofread</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        @if (!Model.Chapters.Any())
                        {
                            <tfoot>
                                <tr>
                                    <td colspan="8">No chapter found.</td>
                                </tr>
                            </tfoot>
                        }
                    </table>
                    <p>
                        <a href="@Url.Action("Add", "Chapter", new {NovelID = Model.ID, Title = Model.Title, Volume = latestChapter.Volume, Number = latestChapter.Number + 1})">
                            <i class="fa fa-plus-circle"></i>Add new chapter
                        </a>
                    </p>
                }
                @if (tab.Equals("Glossaries", StringComparison.OrdinalIgnoreCase))
                {
                    Html.RenderPartial("~/Views/Glossary/_GlossaryGridPartial.cshtml", new PagedList<GlossaryGrid>
                    {
                        Data = Model.Glossaries.Select(s => new GlossaryGrid
                        {
                            ID = s.ID,
                            UpdatedDate = s.UpdatedDate,
                            SourceID = s.SourceID,
                            SourceTable = s.SourceTable,
                            Type = s.Type,
                            RawLanguage = s.RawLanguage,
                            Raw = s.Raw,
                            Final = s.Final,
                            Definition = s.Definition
                        }).AsQueryable().Sort(new BaseCriteria { Sorted = Request.QueryString["sorted"] }).ToList()
                    });
                    <div id="addglossaryalert" class="alert alert-info cursor-pointer action toggle" data-toggle='{ "target": "#addglossary, #addglossaryalert"}'>Click to add new glossary</div>
                    <div id="addglossary" class="well well-sm" style="display: none;">
                        @{
                            Html.RenderPartial("~/Views/Glossary/_FormPartial.cshtml", new GlossaryForm
                            {
                                SourceID = Model.ID,
                                SourceTable = R.SourceTable.NOVEL,
                                RawLanguage = Model.RawLanguage
                            });
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</section>
