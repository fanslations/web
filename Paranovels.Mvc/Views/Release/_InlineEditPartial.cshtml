@using Paranovels.Common
@using Paranovels.ViewModels
@using Thi.Core
@model InlineEditForm<ReleaseDetail>
@{
    Layout = null;
}
<div id="@(Model.InlineEditProperty)Container" class="inline-editor">
    <form id="@(Model.InlineEditProperty)Form" method="post" action="@Url.Action("Form")" enctype="multipart/form-data">
        @if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.GroupID))
        {
            <script>

                //window.pnHooks.push(function () {
                require(['jquery', 'selectize'], function ($, selectize) {
                    'use strict';

                    console.log($, selectize);
                    $('#groupid').selectize({
                        valueField: 'GroupID',
                        labelField: 'Name',
                        searchField: 'Name',
                        create: false,
                        render: {
                            option: function (item, escape) {
                                return '<div>' +
                                    '<strong class="title">' + item.Name + '</strong>' +
                                    '<p class="description">' + escape(item.Url) + '</p>' +
                                    '</div>';
                            }
                        },
                        load: function (query, callback) {
                            if (!query.length) return callback();
                            $.ajax({
                                url: '/query/groups?query=' + encodeURIComponent(query),
                                type: 'GET',
                                error: function () {
                                    callback();
                                },
                                success: function (res) {
                                    callback(res);
                                }
                            });
                        }
                    });
                });
                //});
            </script>
            <label for="groupid" class="sr-only">Select Translations Group</label>
            <select id="groupid" name="@Model.InlineEditProperty" placeholder="Select Group" required></select>

        }
        else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.SeriesID))
        {
            <script>

                //window.pnHooks.push(function () {
                require(['jquery', 'selectize'], function ($, selectize) {
                    'use strict';

                    $('#seriesid').selectize({
                        valueField: 'SeriesID',
                        labelField: 'Title',
                        searchField: 'Title',
                        create: false,
                        render: {
                            option: function (item, escape) {
                                return '<div>' +
                                    '<strong class="title">' + item.Title + '</strong>' +
                                    '<p class="description">' + escape(item.Synopsis) + '</p>' +
                                    '</div>';
                            }
                        },
                        load: function (query, callback) {
                            if (!query.length) return callback();
                            $.ajax({
                                url: '/query/series?query=' + encodeURIComponent(query),
                                type: 'GET',
                                error: function () {
                                    callback();
                                },
                                success: function (res) {
                                    callback(res);
                                }
                            });
                        }
                    });
                });
                //});
            </script>
            <label for="seriesid" class="sr-only">Select Series</label>
            <select id="seriesid" name="@Model.InlineEditProperty" placeholder="Select Series" required></select>

        }
        else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Title))
        {
            <div class="form-group">
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="text" class="form-control" name="@Model.InlineEditProperty" value="@Model.Model.Title" required />
            </div>
        }
        else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Url))
        {
            <div class="form-group">
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="url" class="form-control" name="@Model.InlineEditProperty" value="@Model.Model.Url" required />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="text" class="form-control" name="@Model.InlineEditProperty" required />
            </div>
        }
        <div class="hidden">
            <input type="hidden" name="ID" value="@Model.ID" />
            <input type="hidden" name="InlineEditProperty" value="@Model.InlineEditProperty" />
        </div>
        <div class="form-group clearfix">
            <button id="@(Model.InlineEditProperty)Submit" type="submit" class="btn btn-primary col-xs-7"><i class="fa fa-save"></i>Save</button>

            <button id="@(Model.InlineEditProperty)Cancel" type="button" class="btn btn-default col-xs-4 col-xs-offset-1"><i class="fa fa-times-circle"></i>Cancel</button>
        </div>
    </form>
</div>