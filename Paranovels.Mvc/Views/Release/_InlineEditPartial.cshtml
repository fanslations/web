@using Paranovels.Common
@using Paranovels.ViewModels
@using Thi.Core
@model InlineEditForm<ReleaseDetail>
@{
    Layout = null;
}

@if (!User.Identity.IsAuthenticated)
{
    Html.RenderPartial("_InlineEditorUnauthorizedPartial");
    return;
}
<div id="@(Model.InlineEditProperty)Container" class="inline-editor">
    <form id="@(Model.InlineEditProperty)Form" method="post" action="@Url.Action("Form")" enctype="multipart/form-data">
        <div class="form-group">
            @if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.GroupID))
            {
                <script>
                    require(['jquery', 'selectize'], function ($, selectize) {
                        'use strict';

                        $('#@Model.InlineEditProperty').selectize({
                            valueField: 'GroupID',
                            labelField: 'Name',
                            searchField: 'Name',
                            sortField: 'Name',
                            preload: true,
                            create: function (input, callback) {
                                window.location = '@Url.Action("Index","Group",new { Do = "add" })' + '&Name=' + input + '&ReturnUrl=@Request.UrlReferrer.PathAndQuery';
                            },
                            render: {
                                option: function (item, escape) {
                                    if (item == null) {
                                        return '<div>Item ' + escape + ' does not exist</div>';
                                    }
                                    return '<div>' +
                                        '<strong class="title">' + item.Name + '</strong>' +
                                        '<p class="description">' + escape(item.Url) + '</p>' +
                                        '</div>';
                                }
                            },
                            load: function (query, callback) {

                                $.ajax({
                                    url: '/query/groups?query=' + encodeURIComponent(query),
                                    type: 'GET',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res);
                                    }
                                });
                            }
                        });
                    });
</script>
                <label for="@Model.InlineEditProperty" class="sr-only">Select Translations Group</label>
                <select id="@Model.InlineEditProperty" name="@Model.InlineEditProperty" placeholder="Select Group" required></select>
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.SeriesID))
            {
                <script>
                    require(['jquery', 'selectize'], function ($, selectize) {
                        'use strict';

                        $('#seriesid').selectize({
                            valueField: 'SeriesID',
                            labelField: 'Title',
                            searchField: 'Title',
                            sortField: 'Title',
                            preload: true,
                            create: function (input, callback) {
                                window.location = '@Url.Action("Index","Series",new { Do = "add" })' + '&Title=' + input + '&ReturnUrl=@Request.UrlReferrer.PathAndQuery';
                            },
                            render: {
                                option: function (item, escape) {
                                    return '<div class="table-striped">' +
                                        '<strong class="title">' + item.Title + '</strong>' +
                                        '<p class="description">' + '</p>' +
                                        '</div>';
                                }
                            },
                            load: function (query, callback) {
                                $.ajax({
                                    url: '/query/series?query=' + encodeURIComponent(query),
                                    type: 'GET',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res);
                                    }
                                });
                            }
                        });
                    });
                </script>
                <label for="@Model.InlineEditProperty" class="sr-only">Select Series</label>
                <select id="@Model.InlineEditProperty" name="@Model.InlineEditProperty" placeholder="Select Series" required></select>
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Title))
            {
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="text" class="form-control" name="@Model.InlineEditProperty" value="@Model.Model.Title" required />
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Url))
            {

                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="url" class="form-control" name="@Model.InlineEditProperty" value="@Model.Model.Url" required />

            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Type))
            {
                <fieldset class="form-control">
                    <legend class="sr-only">Release Type</legend>
                    @foreach (var item in R.ReleaseType.Translate)
                    {
                        <div class="radio">
                            <label>
                                <input id="type-@item.Key" type="radio" name="@Model.InlineEditProperty" value="@item.Key" checked="@(Model.Model.Type == item.Key)" required />
                                @item.Value
                            </label>
                        </div>
                    }
                </fieldset>
            }
            else if (Model.InlineEditProperty.Contains("Date"))
            {
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="date" class="form-control" name="@Model.InlineEditProperty" required />
            }
            else
            {
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <input id="@Model.InlineEditProperty" type="text" class="form-control" name="@Model.InlineEditProperty" required />
            }
        </div>
        <div class="hidden">
            <input type="hidden" name="ID" value="@Model.ID" />
            <input type="hidden" name="InlineEditProperty" value="@Model.InlineEditProperty" />
        </div>
        <div class="form-group clearfix">
            <button id="@(Model.InlineEditProperty)Submit" type="submit" class="btn btn-primary"><i class="fa fa-save"></i>Save</button>

            <button id="@(Model.InlineEditProperty)Cancel" type="button" class="btn btn-default"><i class="fa fa-times-circle"></i>Cancel</button>
        </div>
    </form>
</div>
