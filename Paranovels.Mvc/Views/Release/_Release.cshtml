@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model Thi.Core.PagedList<Paranovels.ViewModels.ReleaseGrid>
@{
    var session = User.GetSession();

    var sortedModel = new SortedModel
    {
        Sorted = Request.QueryString["sorted"] ?? "new",
        SortOptions = Model.Data.AsQueryable().SortOptions()
    };

    var stickyDatas = Model.Data.Where(w => w.IsSticky).ToList();
    var datas = Model.Data.Where(w => w.IsSticky == false).ToList();
}

@helper DisplayGrid(ReleaseGrid item, string cssClass = "row-list")
{
    var summarize = new Summarize
    {
        ID = item.ID,
        SourceID = item.ID,
        SourceTable = R.SourceTable.RELEASE,
        QualityCount = item.QualityCount.GetValueOrDefault(),
        QualityScore = item.QualityScore.GetValueOrDefault()
    };
    <li class="@cssClass">
        <div class="col-first">
            @if (item.Voted.HasValue)
            {
                <div class="vote @(item.Voted.GetValueOrDefault() == 1 ? "likes" : item.Voted.GetValueOrDefault() == -1 ? "dislikes" : "")">
                    <div class="action vote-up" data-vote='{"SourceID": @item.ID, "SourceTable": @R.SourceTable.RELEASE, "Vote": 1}'><i class="fa fa-chevron-up"></i></div>
                    <div class="score @((item.VoteUp - item.VoteDown) < 0 ? "dislikes" : "likes")">@(item.VoteUp.GetValueOrDefault() - item.VoteDown.GetValueOrDefault())</div>
                    <div class="action vote-down" data-vote='{"SourceID": @item.ID, "SourceTable": @R.SourceTable.RELEASE, "Vote": -1}'><i class="fa fa-chevron-down"></i></div>
                </div>
            }
            @*@if (item.IsRead.HasValue)
                {
                    <div class="read @(item.IsRead.GetValueOrDefault() ? "yes" : "no")" title="@(item.IsRead.GetValueOrDefault() ? "Your already read this release" : "Mark this as read")">
                        <div class="action read" data-read='{"SourceID": @item.ID, "SourceTable": @R.SourceTable.RELEASE}'><i class="fa @("fa-check")"></i></div>
                    </div>
                }*@
        </div>
        <div class="col-content">
            <ul class="list-unstyled list-inline fs-09em">
                @if (item.Series != null)
                {
                    <li class="label label-success">@item.Series.RawLanguage.Translate(R.Language.Translate)</li>
                    @TagHelper.DisplayTags(item.Tags.Where(w => w.TagType == R.TagType.CATEGORY), "label label-primary")
                    <li class="label label-info">@(item.Series.RawLanguage == R.Language.ENGLISH ? "Original" : "Translation")</li>
                    @TagHelper.DisplayTags(item.Tags.Where(w => w.TagType == R.TagType.GENRE), "label label-warning")
                }
                else if (item.Type == R.ReleaseType.NEWS)
                {
                    <li class="label label-default release-type">
                        @item.Type.Translate(R.ReleaseType.Translate)
                    </li>
                }
            </ul>
            <div>
                @if (item.IsSticky)
                {
                    <i class="fa fa-thumb-tack color-red pull-right" title="pinned"></i>
                }

                @foreach (var list in item.UserLists ?? new List<UserList>())
                {
                    if (list.IsPlaceInFrontOfTitle)
                    {
                        var connector = item.Connectors.SingleOrDefault(w => w.ConnectorType == R.ConnectorType.SERIES_USERLIST && w.SourceID == item.SeriesID && w.TargetID == list.ID);
                        if (connector != null && connector.IsDeleted == false)
                        {
                            <span class="fa animated bounce no-margin" style="@(list.IsColorIcon ? string.Format("color:{0};", list.Color.ToColorHex()) : "")" title="this indicated that it in your @list.Name">&#xf@(Convert.ToString(list.Icon, 16).PadLeft(3, '0'));</span>
                        }
                    }
                }
                <a href="@Url.Action("Detail", "Release", new {ID = item.ID, Seo = item.Title.ToSeo()})" class="fs-12em">@item.PrettyTitle</a>
                @*@item.ImproveThis(m => m.Title, new Dictionary<string, object> { { "data-posturl", Url.Action("InlineEdit", "Release") } })*@
            </div>

            <ul class="list-unstyled list-inline fs-09em">
                <li title="Release Date"><i class="fa fa-clock-o"></i><time class="timeago" datetime="@item.Date.ToString("u")">@item.Date.ToString("u")</time></li>
                @if (item.QualityRated.HasValue)
                {
                    <li title="Comments">
                        <i class="fa fa-comments-o"></i><a href="@Url.Action("Detail", "Release", new { ID = item.ID, Seo = item.Title.ToSeo() })#comments">@item.CommentCount.GetValueOrDefault() comments</a>
                    </li>
                    <li title="Rating">
                        <i class="fa fa-diamond" title="@(item.QualityRated == 0 ? "You haven't  rated this" : string.Format("You rated {0:0.0} star(s)", item.QualityRated/2))"></i>@RatingHelper.DisplayRating(summarize)
                    </li>
                }
                @if (item.Series != null)
                {
                    <li title="Series Title">
                        <i class="fa fa-book">

                        </i><a href="@Url.Action("Detail","Series", new{ ID= item.Series.ID, Seo = item.Series.Title.ToSeo()})">@item.Series.Title</a>
                    </li>
                }
                @if (item.Group != null)
                {
                    <li title="Translations Group">
                        <i class="fa fa-group"></i><a href="@Url.Action("Detail","Group", new{ ID= item.Group.ID, Seo = item.Group.Name.ToSeo()})">@item.Group.Name</a>
                    </li>
                }
            </ul>
        </div>
    </li>
}

<div class="content">
    @{
        Html.RenderPartial("_Sorted", sortedModel);
    }
</div>
@{
    var shouldGroupByDate = sortedModel.Sorted == "new" || sortedModel.Sorted == "old";

    if (shouldGroupByDate)
    {
        <ul class="grid">
            @foreach (var item in stickyDatas)
            {
                @DisplayGrid(item)
            }
            @foreach (var date in datas.GroupBy(g => g.Date.Date).Select(s => s.Key))
            {
                var dateItems = datas.Where(w => w.Date.Date == date).ToList();

                <li class="row-list @(date == DateTime.Now.Date ? "hidden" : "")">
                    <strong class="color-green">@date.ToLongDateString()</strong>
                </li>

                foreach (var item in dateItems.Where(w => w.IsRead != true && !session.HiddenSeriesIDs.Contains(w.SeriesID)))
                {
                    @DisplayGrid(item)
                }
                if (dateItems.Any(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)))
                {
                    <li id="view-mores@(date.ToString("ddMMyyyy"))" class="row-mores">
                        <a role="button" class="" onclick="$('.already-read@(date.ToString("ddMMyyyy"))').removeClass('hidden'); $('#view-mores@(date.ToString("ddMMyyyy"))').addClass('hidden');" href="javascript:;">
                            <i class="fa fa-history"></i>@datas.Where(w => w.Date.Date == date).Count(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)) release(s) hidden. <strong>Click to View</strong>
                        </a>
                    </li>
                }
                foreach (var item in dateItems.Where(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)))
                {
                    @DisplayGrid(item, "row-list hidden opacity-05 already-read" + date.ToString("ddMMyyyy"))
                }
            }
        </ul>
    }
    else
    {
        <ul class="grid">
            @foreach (var item in stickyDatas)
            {
                @DisplayGrid(item)
            }
            @foreach (var item in datas.Where(w => w.IsRead == false && !session.HiddenSeriesIDs.Contains(w.SeriesID)))
            {
                @DisplayGrid(item)
            }
            @if (datas.Any(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)))
            {
                <li id="view-mores" class="row-mores">
                    <a role="button" class="" onclick="$('.already-read').removeClass('hidden'); $('#view-mores').addClass('hidden');" href="javascript:;">
                        <i class="fa fa-history"></i>@datas.Count(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)) release(s) hidden. <strong>Click to View</strong>
                    </a>
                </li>
            }
            @foreach (var item in datas.Where(w => w.IsRead == true || session.HiddenSeriesIDs.Contains(w.SeriesID)))
            {
                @DisplayGrid(item, "row-list hidden opacity-05 already-read")
            }
        </ul>
    }
}
