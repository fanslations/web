@using System.Web.UI.WebControls
@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model SeriesDetail
@{
    ViewBag.Title = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var tab = Request.QueryString["Tab"] ?? "Comments";

    var feedColorMapper = new Dictionary<int, string>
    {
        {R.FeedStatus.ACTIVE, "green"},
        {R.FeedStatus.INACTIVE, "orange"},
        {R.FeedStatus.DEAD, "red"},
        {R.FeedStatus.PENDING, "gray"},
    };
}
<section class="section">
    <div class="header">
        <a href="@Url.Action("Index")" class="action left"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @Model.Title
        </h1>
    </div>
    @{ Html.RenderPartial("~/Views/UserList/_AddSeriesToList.cshtml", Model); }
    <div class="content">
        <div class="detail-group improve-img">
            @if (string.IsNullOrWhiteSpace(Model.ImageUrl))
            {
                @Html.ImproveThis(m => m.ImageUrl, customHtmlIcon: @"<i class="" fa fa-upload""></i>Upload cover image for " + Model.Title)
            }
            else
            {
                <img src="@Model.ImageUrl.ToGoogleDriveImageUrl()" class="center-block img-responsive" title="@Model.Title's cover image" />
                @Html.ImproveThis(m => m.ImageUrl, customHtmlIcon: @"<i class="" fa fa-upload""></i>Edit")
            }
        </div>
        <div class="detail-group">
            <strong class="sr-only">Synopsis</strong>
            <div>
                @Html.Raw(Model.Synopsis.FormatString(0, 20, "No synopsis available. Click on 'Edit' to help us update it."))
                @Html.ImproveThis(m => m.Synopsis)
            </div>
        </div>
        <div class="detail-group">
            <strong>Series Title</strong>
            <div>
                @Html.Raw(Model.Title)
                @Html.ImproveThis(m => m.Title)
            </div>
        </div>
        <div class="detail-group">
            <strong>Associated Titles</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    @Html.Raw(Model.Akas.Count > 0 ? "" : "This series has no associated title.")
                    @foreach (var item in Model.Akas)
                    {
                        <li>
                            <a href="@Url.Action("Detail", "Series", new { Model.ID, Seo = item.Text.ToSeo() })">@item.Text</a>
                        </li>
                    }
                    <li>
                        @Html.ImproveThis(m => m.Akas, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add associated title")
                    </li>
                </ul>

            </div>
        </div>
        <div class="detail-group">
            <strong>Author(s)</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    <li>
                        @Html.Raw(Model.Authors.Count > 0 ? "" : "Do you know who is the author(s)? Help us update it.")
                        @foreach (var item in Model.Authors.OrderBy(o => o.Name))
                        {
                            // editing another table (connector)
                            var connector = Model.Connectors.Single(w => w.ConnectorType == R.ConnectorType.SERIES_AUTHOR && w.TargetID == item.AuthorID);
                            <ul class="list-unstyled">
                                <li>
                                    <a href="@Url.Action("Detail", "Author", new { ID = item.AuthorID, Seo = item.Name.ToSeo() })">@Html.Raw(item.Name.FormatString())</a>
                                    @connector.ImproveThis(m => m.TargetID, new Dictionary<string, object> { { "data-posturl", Url.Action("InlineEdit", "Connector") } })
                                </li>
                            </ul>
                        }
                    </li>
                    <li>
                        @Html.ImproveThis(m => m.Authors, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new author")
                    </li>
                </ul>
            </div>
        </div>
        <div class="detail-group">
            <strong>Categories</strong>
            <div>
                @Html.Raw(string.Join(", ", Model.Categories.Select(s => string.Format(@"<a href=""{1}"">{0}</a>", s.Name, Url.Action("Detail", "Tag", new { ID = s.TagID, Seo = s.Name.ToSeo() })))).FormatString(0, 20, "Help us categorize this series? Click on 'Edit' to help us update it."))
                @Html.ImproveThis(m => m.Categories)
            </div>
        </div>
        <div class="detail-group">
            <strong>Genres</strong>
            <div>
                @Html.Raw(string.Join(", ", Model.Genres.Select(s => string.Format(@"<a href=""{1}"">{0}</a>", s.Name, Url.Action("Detail", "Tag", new { ID = s.TagID, Seo = s.Name.ToSeo() })))).FormatString(0, 20, "Do know the genres of this series? Click on 'Edit' to help us update it."))
                @Html.ImproveThis(m => m.Genres)
            </div>
        </div>
        <div class="detail-group">
            <strong>Updated Date</strong>
            <div>@Html.Raw(Model.UpdatedDate.FormatDate())</div>
        </div>
        <div class="detail-group">
            <strong>Status</strong>
            <div>
                @Html.Raw(Model.Status.Translate(R.TranslationStatus.Translate).FormatString(0, 20, "Do know the status of this series? Click on 'Edit' to help us update it."))
                @Html.ImproveThis(m => m.Status)
            </div>
        </div>
        <div class="detail-group">
            <strong>Latest Release</strong>
            <div>
                @{ var release = Model.Releases.OrderByDescending(o => o.Date).FirstOrDefault() ?? new Release(); }
                <a href="@Url.Action("Detail", "Release", new { ID = release.ReleaseID, Seo = release.Title.ToSeo()})">@release.Title</a> - @release.Date.FormatDate()
            </div>
        </div>
        <div class="detail-group">
            <strong>Release Frequency</strong>
            <div>
                @{
                    const int DAYS = 30;
                    var total = Model.Releases.Count(w => w.Date > DateTime.Now.AddDays(DAYS * -1));
                    var releaseFrequency = (double)DAYS / total;
                }
                @(releaseFrequency > 1 ? string.Format("About every {0:0.0} day(s) based on last {1} days", releaseFrequency, DAYS) : string.Format("About every {0:0.0} hours(s) based on last {1} days", releaseFrequency * 24, DAYS))
            </div>
        </div>
        <div class="detail-group">
            <strong>Day(s) of Release</strong>
            <div>
                @{
                    var daysOfRelease = Model.Releases.Where(w => w.Date > DateTime.Now.AddDays(DAYS * -1)).GroupBy(o => o.Date.DayOfWeek).OrderByDescending(o => o.Count()).Select(s => s.Key).ToList();

                }
                @string.Join(", ", daysOfRelease)
            </div>
        </div>
        <div class="detail-group">
            <strong>Orginal Language</strong>
            <div>
                @Model.RawLanguage.Translate(R.Language.Translate)
                @Html.ImproveThis(m => m.RawLanguage)
            </div>
        </div>
        <div class="detail-group">
            <strong>Raw Source</strong>
            <div>
                <a href="@Model.RawUrl" target="_blank">@Model.RawUrl</a>
                @if (string.IsNullOrWhiteSpace(Model.RawUrl))
                {
                    <text>No raw source url available. Click on 'Edit' to help us update it.</text>
                }
                @Html.ImproveThis(m => m.RawUrl)
            </div>
        </div>
        @*<div class="detail-group">
                <strong>Website</strong>
                <div>
                    @if (string.IsNullOrWhiteSpace(Model.Url))
                    {
                        Html.Raw(Model.Url.FormatString());
                    }
                    else
                    {
                        <a href="@Model.Url" target="_blank">@Model.Url<i class="fa fa-external-link right"></i></a>
                    }
                    @Html.ImproveThis(m => m.Url)
                </div>
            </div>*@
        <div class="detail-group">
            <strong>Rss Feed</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    <li>
                        @Html.Raw(Model.Feeds.Count > 0 ? "" : "No rss feed available. Help us add a rss feed and track this series.")
                        @foreach (var item in Model.Feeds)
                        {
                            <ul class="list-unstyled">
                                <li>
                                    <i class="fa fa-circle" style="color: @feedColorMapper[item.Status]" title="last success date @item.LastSuccessDate"></i><a href="@item.Url">@item.Url</a>
                                    @Html.ImproveThis(m => m.Feeds, new Dictionary<string, object> { { "data-posturl", Url.Action("InlineEdit", "Series", new { FeedID = item.FeedID}) } })
                                </li>
                            </ul>
                        }
                    </li>
                    <li>
                        @Html.ImproveThis(m => m.Feeds, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new rss feed")
                    </li>
                </ul>
            </div>
        </div>
        <div class="detail-group">
            <strong>Translations Group</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    <li>
                        @Html.Raw(Model.Groups.Count > 0 ? "" : "Do you know who translated this series? Help us gave credit to group(s) that brought you this series.")
                        @foreach (var item in Model.Groups.OrderBy(o=>o.Name))
                        {
                            // editing another table (connector)
                            var connector = Model.Connectors.Single(w => w.ConnectorType == R.ConnectorType.SERIES_GROUP && w.TargetID == item.GroupID);
                            <ul class="list-unstyled">
                                <li>
                                    <a href="@Url.Action("Detail", "Group", new { ID = item.GroupID, Seo = item.Name.ToSeo() })">@Html.Raw(item.Name.FormatString()) <small>(@item.Url)</small></a>
                                    @connector.ImproveThis(m => m.TargetID, new Dictionary<string, object> { { "data-posturl", Url.Action("InlineEdit", "Connector") } })
                                </li>
                            </ul>
                        }
                    </li>
                    <li>
                        @Html.ImproveThis(m => m.Groups, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new group")
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>
<section class="section">
    <div class="content">
        <div class="toolbar clearfix">
            <div class="vote-score">
                <div class="vote @(Model.UserAction.Voted.GetValueOrDefault() == 1 ? "likes" : Model.UserAction.Voted.GetValueOrDefault() == -1 ? "dislikes" : "")">
                    <span role="button" class="action vote-up" data-vote='{"SourceID": @Model.ID, "SourceTable": @R.SourceTable.SERIES, "Vote": 1}' title="i like this"><i class="fa fa-thumbs-o-up"></i></span>
                    <span class="score @((Model.Summarize.VoteUp - Model.Summarize.VoteDown) < 0 ? "dislikes" : "likes")">
                        @(Model.Summarize.VoteUp - Model.Summarize.VoteDown)
                    </span>
                    <span role="button" class="action vote-down" data-vote='{"SourceID": @Model.ID, "SourceTable": @R.SourceTable.SERIES, "Vote": -1}' title="i dislike this"><i class="fa fa-thumbs-o-down"></i></span>
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-thumbs-o-up"></i>@Model.Summarize.VoteUp likes
                </div>
                <div>
                    <i class="fa fa-thumbs-o-down"></i>@Model.Summarize.VoteDown dislikes
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-eye"></i>@Model.Summarize.ViewCount views
                </div>
                <div>
                    <i class="fa fa-check-square-o"></i>@Model.Summarize.ReadCount reads
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-diamond"></i>@RatingHelper.DisplayRating(Model.Summarize)
                </div>
                <div>
                    <i class="fa @(Model.UserAction.QualityRated > 0 ? "fa-star" : "fa-star-o")"></i>@Model.Summarize.QualityCount users rated
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-comments"></i>@Model.Summarize.CommentCount comments
                </div>
                <div>
                    <i class="fa fa-list-alt"></i>On @Model.Connectors.Count(w => w.ConnectorType == R.ConnectorType.SERIES_USERLIST && w.SourceID == Model.SeriesID) lists
                </div>
            </div>
            <div class="info">
                <div>
                    <i class="fa fa-rss"></i>@Model.Releases.Count() releases
                </div>
                <div>

                </div>
            </div>
        </div>
    </div>
</section>
<section class="section">
    <div class="content">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="@(tab.Equals("Comments",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Comments" aria-controls="home" role="tab">Comments (@Model.Summarize.CommentCount)</a>
            </li>
            <li role="presentation" class="@(tab.Equals("Releases",StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                <a href="?Tab=Releases" aria-controls="home" role="tab">Releases (@Model.Releases.Count)</a>
            </li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">
            @if (tab.Equals("Comments", StringComparison.OrdinalIgnoreCase))
            {
                <div role="tabpanel" class="tab-pane active" id="comments">
                    @{
                Html.RenderAction("Index", "Comment", new CommentCriteria { SourceID = Model.SeriesID, SourceTable = R.SourceTable.SERIES, Sorted = Request.QueryString["sorted"] });
                    }
                </div>
            }
            @if (tab.Equals("Releases", StringComparison.OrdinalIgnoreCase))
            {
                <div role="tabpanel" class="tab-pane active section" id="releases">
                    @{
                Html.RenderPartial("~/Views/Release/_Release.cshtml", new PagedList<ReleaseGrid>
                {
                    Data = Model.Releases.Select(s => new ReleaseGrid
                    {
                        ReleaseID = s.ReleaseID,
                        Title = s.Title,
                        Date = s.Date,
                        Url = s.Url,
                        Series = Model,
                        Group = Model.Group,
                        UserLists = new List<UserList>(),
                        Connectors = new List<Connector>(),

                    }).AsQueryable().Sort(new BaseCriteria { Sorted = Request.QueryString["sorted"] }).ToList()
                });
                    }
                </div>
            }
        </div>
    </div>
</section>