@using Paranovels.Common
@using Thi.Core
@model Paranovels.ViewModels.BaseCriteria

<div id="search-container" class="form" style="@((!string.IsNullOrWhiteSpace(Model.Query) || Request.QueryString["do"] == "search") ? "display:block;" : "display:none;")">
    <form class="searchform" method="GET">
        @foreach (var hiddenField in Model.HiddenFields ?? new Dictionary<string, string>())
        {
            <input type="hidden" name="@hiddenField.Key" value="@hiddenField.Value" />
        }
        <label for="search"><span class="sr-only">Search</span></label>
        <input id="search" type="search" name="@Model.PropertyName(m=> m.Query)" class="searchfield typeahead" value="@Model.Query" placeholder="Enter text to search...">
        <button type="submit" class="searchbutton"><i class="fa fa-search no-margin"></i></button>
        <a><i class="fa fa-plus-square"></i><span class="mobile-hidden">Advanced</span></a>
    </form>
</div>
<script>
    window.pnHooks = window.pnHooks || [];
    window.pnHooks.push(function () {
        require(['jquery', 'typeahead', 'bloodhound'], function ($, typeahead, Bloodhound) {

            var searchDatas = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Title'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '/query/searchrelease?',
                remote: {
                    url: '/query/release/?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('.typeahead').typeahead(null, {
                name: 'search-datas',
                display: 'Title',
                source: searchDatas,
                hint: true,
                highlight: true,
                templates: {
                    empty: [
                      '<div><strong class="empty-message">',
                      'Unable to find any release that match the current query',
                      '</strong></div>'
                    ].join('\n'),
                    suggestion: function (data) {
                        return '<div><strong>' + data.Title + '</strong></div>';
                    }
                }

            });
        });
    });
</script>