@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model Paranovels.ViewModels.ListDetail
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var session = User.GetSession();

    var sortedModel = new SortedModel
    {
        Sorted = Request.QueryString["sorted"] ?? "title",
        SortOptions = Model.Series.AsQueryable().SortOptions()
    };
}


<section class="section">
    <div class="header">
        <a href="javascript:history.go(-1);" class="action left"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @ViewBag.Title
        </h1>
        @if (Model.UserID == session.UserID)
        {
            <a class="action toggle right" role="button" data-toggle='{ "target":"#addtolist"}'><i class="fa fa-plus-circle"></i></a>
            <a class="action toggle right" role="button" data-toggle='{ "target":"#settings"}'><i class="fa fa-gear"></i></a>
        }
    </div>
    @if (Model.ShareLevel != R.ShareLevel.PUBLIC && Model.UserID != session.UserID)
    {
        <div class="content">
            <div class="alert alert-danger">This list is not public and you donot have permission to view it.</div>
        </div>
        return;
    }
    <div id="addtolist" class="form animated" style="display: none;">
        @{ var formModel = new ConnectorForm(); }
        @*<script>
                window.pnHooks = window.pnHooks || [];
                window.pnHooks.push(function () {
                    require(['jquery', 'selectize'], function ($, selectize) {
                        'use strict';

                        $('#seriesid').selectize({
                            valueField: 'SeriesID',
                            labelField: 'Title',
                            searchField: 'Title',
                            create: false,
                            render: {
                                option: function (item, escape) {
                                    return '<div>' +
                                        '<strong class="title">' + item.Title + '</strong>' +
                                        '<p class="description">' + escape(item.Synopsis) + '</p>' +
                                        '</div>';
                                }
                            },
                            load: function (query, callback) {
                                if (!query.length) return callback();
                                $.ajax({
                                    url: '/query/series?query=' + encodeURIComponent(query),
                                    type: 'GET',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res);
                                    }
                                });
                            }
                        });
                    });
                });
            </script>*@

        @*<form method="post" action="@Url.Action("Form", "Connector")" enctype="multipart/form-data" data-form-ajax='{"returnUrl":"@Request.RawUrl"}'>
                <div class="form-group">
                    <label for="seriesid" class="sr-only">Select Series</label>
                    <select id="seriesid" name="@formModel.PropertyName(m=> m.SourceID)" placeholder="Select Series" required></select>
                </div>
                <div class="hidden">
                    <input type="hidden" name="@formModel.PropertyName(m=> m.ConnectorType)" value="@R.ConnectorType.SERIES_USERLIST" />
                    <input type="hidden" name="@formModel.PropertyName(m=> m.TargetID)" value="@Model.UserListID" />
                </div>
                <div class="form-group clearfix">
                    <button type="submit" class="btn btn-primary"><i class="fa fa-plus-circle"></i>Add to list</button>
                    <button type="button" class="btn btn-default action toggle" data-toggle='{ "target":"#addtolist"}'><i class="fa fa-times-circle"></i>Cancel</button>
                </div>
            </form>*@
        <form>
            <p class="form-group">
                Add a series to your list by
                <ul>
                    <li>Click on <a href="@Url.Action("index","Series")">'<i class="fa fa-book"></i>Series'</a>. (You can click on <i class="fa fa-search"></i> on the Series page to search)</li>
                    <li>Find the series you want and click on the 'Series Title' to view details of the series</li>
                    <li>You will see your lists available on top of the details page</li>
                    <li>Click on the name of the list to add to that list. Click again to remove from that list</li>
                </ul>
            </p>
        </form>
    </div>
    <div id="settings" class="form animated" style="display: none;">
        <div class="well well-sm no-margin" style="background: white;">
            <div class="detail-group">
                <strong>Name</strong>
                <div>
                    @Model.Name
                    @Html.ImproveThis(m => m.Name)
                </div>
            </div>
            <div class="detail-group">
                <strong>Description</strong>
                <div>
                    @Model.Description
                    @Html.ImproveThis(m => m.Description)
                </div>
            </div>
            <div class="detail-group">
                <strong>Sharing</strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m=>m.ShareLevel)" />
                        @foreach (var level in R.ShareLevel.Translate)
                        {
                            <label class="radio-inline">
                                <input name="@Model.PropertyName(m => m.ShareLevel)" class="submit" type="radio" value="@(level.Key)" checked="@(Model.ShareLevel == level.Key)" />
                                @level.Value
                            </label>
                        }

                    </form>
                </div>
            </div>
            <div class="detail-group">
                <strong>Icon</strong>
                <div>
                    <span id="icon" class="fa" style="@(Model.IsColorIcon ? string.Format("color:{0};", Model.Color.ToColorHex()) : "")">&#xf@(Convert.ToString(Model.Icon, 16).PadLeft(3, '0'));</span>
                    @Html.ImproveThis(m=> m.Icon)
                </div>
            </div>
            <div class="detail-group">
                <strong>Color</strong>
                <div>
                    <form id="color-form" action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m=>m.Color)" />
                        <input id="color" name="ColorHex" type="hidden" pattern="#[a-zA-z0-9]{6}" value="@Model.Color.ToColorHex()" />
                    </form>
                    <span id="colorselector" class="colorSelector" style="background-color: @Model.Color.ToColorHex();"></span>
                    <script>
                        window.pnHooks = window.pnHooks || [];
                        window.pnHooks.push(function () {
                            require(['colorpicker'], function () {
                                $('#colorselector').ColorPicker({
                                    onSubmit: function (hsb, hex, rgb, el, parent) {
                                        $(el).ColorPickerHide();
                                    },
                                    onShow: function (colpkr) {
                                        $(colpkr).fadeIn(500);
                                        return false;
                                    },
                                    onHide: function (colpkr) {
                                        // save changed color
                                        $('#color-form').submit();

                                        $(colpkr).fadeOut(500);
                                        return false;
                                    },
                                    onChange: function (hsb, hex, rgb) {
                                        $('#colorselector').css('backgroundColor', '#' + hex);
                                        $('#icon').css('color', '#' + hex);
                                        $('#color').val('#' + hex);
                                    }
                                }).on('click', function () {
                                    $(this).ColorPickerSetColor($('#colorselector').css('backgroundColor'));
                                });
                            });
                        });
                    </script>

                </div>
            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m=>m.IsColorIcon)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m=>m.IsColorIcon)" class="submit" type="checkbox" value="true" checked="@(Model.IsColorIcon)" />
                            Use color icon
                        </label>
                    </form>
                </div>

            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m=>m.IsPlaceInFrontOfTitle)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m => m.IsPlaceInFrontOfTitle)" class="submit" type="checkbox" value="true" checked="@(Model.IsPlaceInFrontOfTitle)" />
                            Place icon in front of title in home, release, series page
                        </label>
                    </form>
                </div>
            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m => m.IsHiddenInFrontpage)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m => m.IsHiddenInFrontpage)" class="submit" type="checkbox" value="true" checked="@(Model.IsHiddenInFrontpage)" />
                            Hide this series from home, release, series page
                        </label>
                    </form>
                </div>
            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m => m.IsAutoAddWhenRead)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m => m.IsAutoAddWhenRead)" class="submit" type="checkbox" value="true" checked="@(Model.IsAutoAddWhenRead)" />
                            Automatically add series that I read to this list <small>(Click "Read It" button in release details page will automatically add to this list if this is checked)</small>
                        </label>
                    </form>
                </div>
            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m => m.IsNotifyOfNewRelease)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m => m.IsNotifyOfNewRelease)" class="submit" type="checkbox" value="true" checked="@(Model.IsNotifyOfNewRelease)" />
                            Show notification of new releases for series in this list
                        </label>
                    </form>
                </div>
            </div>
            <div class="detail-group">
                <strong></strong>
                <div>
                    <form action="@Url.Action("Form","UserList")" method="POST" data-form-ajax='{ "reload": false }'>
                        <input type="hidden" name="ID" value="@Model.ID" />
                        <input type="hidden" name="UserID" value="@Model.UserID" />
                        <input type="hidden" name="InlineEditProperty" value="@Model.PropertyName(m => m.IsNotifyOfNewRelease)" />
                        <label class="no-bold">
                            <input name="@Model.PropertyName(m => m.IsNotifyOfNewRelease)" class="submit" type="checkbox" value="true" checked="@(Model.IsNotifyOfNewRelease)" />
                            Email new releases for series in this list <small>(Will email to @session.Email<a class="fa fa-edit right" href="@Url.Action("Profile","User", new { ID = session.UserID, Seo = session.Username.ToSeo() })"></a>)</small>
                        </label>
                    </form>
                </div>
            </div>
            <div class="btn-row clearfix">
                <button type="button" class="btn btn-primary btn-sm pull-right" onclick="window.location.reload();"><i class="fa fa-refresh"></i>Apply Settings</button>
            </div>
        </div>
    </div>
    <div class="content">
        <p class="alert alert-info">
            Series or Releases that in @Model.Name @(Model.IsPlaceInFrontOfTitle ? "will" : "will NOT") have an icon <span class="fa" style="@(Model.IsColorIcon ? string.Format("color:{0};", Model.Color.ToColorHex()) : "")">&#xf@(Convert.ToString(Model.Icon, 16).PadLeft(3, '0'));</span> in front of the title.
            <a class="alert-link action toggle" role="button" data-toggle='{ "target":"#settings" }'>Click <i class="fa fa-gear"></i> to change list settings.</a>
        </p>
    </div>
    <div class="content">
        @{
            Html.RenderPartial("_Sorted", sortedModel);
        }
    </div>
    <div class="content">
        <table class="table table-condensed table-responsive">
            <tr>
                <th>Series Title</th>
                <th>New Release</th>
                <th>Updated Date</th>
                <th>Rating</th>
            </tr>
            @foreach (var item in Model.Series.AsQueryable().Sort(new BaseCriteria { Sorted = sortedModel.Sorted }))
            {
                var summarize = new Summarize
                {
                    ID = item.ID,
                    SourceID = item.ID,
                    SourceTable = R.SourceTable.SERIES,
                    QualityCount = item.QualityCount.GetValueOrDefault(),
                    QualityScore = item.QualityScore.GetValueOrDefault()
                };
                var read = Model.Releases.Where(w => w.SeriesID == item.SeriesID).Where(w => Model.Reads.Any(a => a.SourceID == w.ReleaseID)).OrderByDescending(o => o.Date).FirstOrDefault() ?? new Release();
                var unreads = Model.Releases.Where(w => w.SeriesID == item.SeriesID).Where(w => w.Date > read.Date).ToList();

                <tbody class="no-border">
                    <tr>
                        <td>

                            <a class="btn-block" href="@Url.Action("Detail", "Series", new{ ID = item.SeriesID, Seo = item.Title.ToSeo() })">@item.Title</a>

                        </td>
                        <td>
                            @if (unreads.Any())
                            {
                            <a role="button" class="action toggle btn-block" data-toggle='{"target":".detail@(item.ID)"}'>@unreads.Count()<i class="fa fa-caret-down"></i></a>
                            }
                            else
                            {
                            <a role="button" class="action toggle btn-block" data-toggle='{"target":".detail@(item.ID)"}'>0<i class="fa fa-caret-down"></i></a>
                            }
                        </td>
                        <td>@item.UpdatedDate.FormatDate()</td>
                        <td>@RatingHelper.DisplayRating(summarize)</td>
                    </tr>
                    <tr class="animated detail@(item.ID)" style="display: none;">
                        <td class="no-border text-left">
                            You read

                        </td>
                        <td class="no-border" colspan="3">

                            @if (read.ReleaseID > 0)
                            {
                            <a href="@Url.Action("Detail", "Release" , new { id=read.ReleaseID, seo=read.Title.ToSeo() })">@read.Title</a>
                            }
                            else
                            {
                            <text>You haven't read any release yet!</text>
                            }
                        </td>
                    </tr>
                    <tr class="animated detail@(item.ID)" style="display: none;">
                        <td class="no-border text-left">
                            New Release(s)
                        </td>
                        <td class="no-border" colspan="3">
                            @foreach (var unread in unreads)
                            {
                            <div class="clearfix">
                                <a class="" href="@Url.Action("Detail", "Release", new { unread.ID, Seo = unread.Title.ToSeo() })">@unread.Title</a>
                                <a class="pull-right" href="@Url.Action("Read", "Release", new { unread.ID, unread.Url, Seo = unread.Title.ToSeo() })" target="_blank">Read It<i class="fa fa-external-link right"></i></a>
                            </div>
                            }
                            @if (!unreads.Any())
                            {
                            <div>There are no new release! <a class="" href="@Url.Action("Index","Release", new{ Do = "add", SeriesID = item.SeriesID })">Click to submit new release.</a></div>
                            }
                        </td>
                    </tr>
                </tbody>
            }
        </table>
        @if (!Model.Series.Any())
        {
            <div class="alert alert-info">@Model.Name is empty. <a href="#addtolist" class="alert-link action toggle" data-toggle='{ "target":"#addtolist" }'>Click <i class="fa fa-plus-circle"></i> to add series to your list.</a></div>
        }
    </div>
</section>
