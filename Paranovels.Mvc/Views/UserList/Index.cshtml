@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model Thi.Core.PagedList<Paranovels.DataModels.UserList>
@{
    ViewBag.Title = "My Lists";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var formModel = new ListForm();
    var listTemplates = (IList<UserList>)ViewBag.ListTemplates ?? new List<UserList>();
}


<section class="section">
    <div class="header">
        <a href="/" class="action left" role="button" title="back"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @ViewBag.Title
        </h1>
    </div>
    <div class="content">
        <section class="section">
            <div class="header">
                <h2 class="title">
                    Your Lists
                </h2>
            </div>
            <script>
                window.pnHooks = window.pnHooks || [];
                window.pnHooks.push(function () {
                    require(['jquery', 'sortable'], function ($, sortable) {
                        $('.sortable').sortable({
                            sortableClass: 'row-list fade'
                        }).bind('sortupdate', function (e, ui) {
                            var form = ui.item.data('form');
                            form.Priority = ui.index + 1;
                            $.ajax({
                                type: 'post',
                                url: '@Url.Action("Form", "UserList")',
                                data: JSON.stringify(form), //$form.serialize(),
                                dataType: 'json',
                                contentType: 'application/json;charset=UTF-8',
                                processData: false,
                                async: true,
                                cache: false,
                                success: function (data) {}
                            });
                        });

                    });
                });
            </script>
            <style type="text/css">
                .sortable-placeholder, .sortable-dragging {
                    height: 61px;
                    border: 1px orange dotted;
                }
            </style>
            <ul class="grid sortable">
                @foreach (var item in Model.Data)
                {
                    <li data-form='{ "ID":@item.ID, "UserID":@item.UserID, "InlineEditProperty":"Priority", "Priority": @item.Priority}' class="row-list">
                        <div class="col-content">
                            <strong>
                                <a href="@Url.Action("Detail", new{ ID = item.UserListID, Seo = item.Name.ToSeo() })">
                                    <span class="fa" style="color: @(item.Color.ToColorHex());">&#xf@(Convert.ToString(item.Icon, 16).PadLeft(3, '0'));</span>@item.Name
                                </a>
                            </strong>
                            <p>@Html.Raw(item.Description.FormatString())</p>
                        </div>
                    </li>

                }
            </ul>
            <div class="alert alert-info no-margin">You can sort your lists by dragging to the desired location. <small>(Move the list up/down will fixed the issue when two lists has the same order.)</small></div>
        </section>
    </div>
    <div id="list-templates" class="content">
        <section class="section">
            <div class="header">
                <h2 class="title">
                    List Templates
                </h2>
            </div>

            <ul class="grid">
                @foreach (var item in listTemplates.OrderBy(o => o.Name))
                {
                    if (Model.Data.All(w => w.Type != item.Type))
                    {
                <li class="row-list">
                    <div class="col-content">
                        <strong>@item.Name</strong>
                        <p>@item.Description</p>
                    </div>
                    <div class="col-image">
                        <form action="@Url.Action("Form", "UserList")" method="POST" data-form-ajax='{}'>
                            <div class="hidden">
                                <input type="hidden" name="ReturnUrl" value="@Request.RawUrl" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.Name)" value="@item.Name" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.Description)" value="@item.Description" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.ShareLevel)" value="@item.ShareLevel" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.Type)" value="@item.Type" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.Icon)" value="@item.Icon" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.Color)" value="@item.Color" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.IsColorIcon)" value="@item.IsColorIcon" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.IsAutoAddWhenRead)" value="@item.IsAutoAddWhenRead" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.IsHiddenInFrontpage)" value="@item.IsHiddenInFrontpage" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.IsNotifyOfNewRelease)" value="@item.IsNotifyOfNewRelease" />
                                <input type="hidden" name="@formModel.PropertyName(m=>m.IsPlaceInFrontOfTitle)" value="@item.IsPlaceInFrontOfTitle" />
                            </div>
                            <button type="submit" class="btn btn-primary"><i class="fa">&#xf@(Convert.ToString(item.Icon, 16).PadLeft(3, '0'));</i>Activate List</button>
                        </form>
                    </div>
                </li>
                    }
                }
                <li class="row-list">
                    <div class="col-content">
                        <strong>Custom List</strong>
                        <p>Create your own custom list. You can create as many custom list as you wants.</p>

                    </div>
                    <div class="col-image">
                        <button type="button" class="btn btn-primary action toggle" data-toggle='{ "target":"#custom-list"}'><i class="fa fa-list"></i>Custom List</button>
                    </div>
                </li>
                <li id="custom-list" class="row-list" style="display: none;">
                    <p class="alert alert-info">Enter name and description below and click 'Create List' to create your new custom list.</p>
                    <form action="@Url.Action("Form", "UserList")" method="POST" data-form-ajax='{}'>
                        <div class="hidden">
                            <input type="hidden" name="ReturnUrl" value="@Request.RawUrl" />
                            <input type="hidden" name="@formModel.PropertyName(m=>m.Type)" value="@R.ListType.CUSTOM" />
                            <input type="hidden" name="@formModel.PropertyName(m=>m.ShareLevel)" value="@R.ShareLevel.PRIVATE" />
                        </div>
                        <div class="form-group">
                            <label id="label-name" for="name">List Name</label>
                            <input id="name" name="@formModel.PropertyName(m => m.Name)" type="text" class="form-control" placeholder="Enter list name" aria-labelledby="label-name" required />
                        </div>
                        <div class="form-group">
                            <label id="label-description" for="description">List description</label>
                            <textarea id="description" name="@formModel.PropertyName(m => m.Description)" class="form-control" placeholder="Enter list description" aria-labelledby="label-description" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">@Html.Raw(R.ListType.CUSTOM.Translate(R.ListType.Translate))Create List</button>
                        <button type="button" class="btn btn-default action toggle" data-toggle='{ "target":"#custom-list"}'><i class="fa fa-times"></i>Cancel</button>
                    </form>
                </li>
            </ul>
        </section>
    </div>
</section>
