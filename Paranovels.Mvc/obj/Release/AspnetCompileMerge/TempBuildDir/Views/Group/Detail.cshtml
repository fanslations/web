@using System.Activities.Statements
@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model Paranovels.ViewModels.GroupDetail
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="section">
    <div class="header">
        <a href="@Url.Action("Index")" class="action left"><i class="fa fa-chevron-circle-left"></i></a>
        <h1 class="title">
            @Model.Name
        </h1>
    </div>
    <div class="content">
        <div class="detail-group">
            <strong class="sr-only">About</strong>
            <div>
                @Html.Raw(Model.About.FormatString())
                @Html.ImproveThis(m => m.About)
            </div>
        </div>
        <div class="detail-group">
            <strong>Status</strong>
            <div>
                @Model.Status.Translate(R.GroupStatus.Translate)
                @Html.ImproveThis(m => m.Status)
            </div>
        </div>
        <div class="detail-group">
            <strong>Updated Date</strong>
            <div>@Model.UpdatedDate.FormatDate()</div>
        </div>
        <div class="detail-group">
            <strong>Last Release</strong>
            <div>
                @{ var release = Model.Releases.OrderByDescending(o => o.Date).FirstOrDefault() ?? new Release(); }
                <a href="@Url.Action("Detail", "Release", new { ID = release.ReleaseID, Seo = release.Title.ToSeo()})">@release.Title</a> - @release.Date.FormatDate()
            </div>
        </div>
        <div class="detail-group">
            <strong>Release Frequency</strong>
            <div>
                @{
                    const int DAYS = 30;
                    var total = Model.Releases.Count(w => w.Date > DateTime.Now.AddDays(DAYS * -1));
                    var releaseFrequency = (double)DAYS / total;
                }

                @(releaseFrequency > 1 ? string.Format("About every {0:0.0} day(s) based on last {1} days", releaseFrequency, DAYS) : string.Format("About every {0:0.0} hours(s) based on last {1} days", releaseFrequency*24, DAYS))
            </div>
        </div>
        <div class="detail-group">
            <strong>Day(s) of Release</strong>
            <div>
                @{
                    var daysOfRelease = Model.Releases.Where(w => w.Date > DateTime.Now.AddDays(DAYS * -1)).GroupBy(o => o.Date.DayOfWeek).OrderByDescending(o => o.Count()).Select(s => s.Key).ToList();

                }
                @string.Join(", ", daysOfRelease)
            </div>
        </div>
        <div class="detail-group">
            <strong>Website</strong>
            <div>
                @if (string.IsNullOrWhiteSpace(Model.Url))
                {
                    Html.Raw(Model.Url.FormatString());
                }
                else
                {
                    <a href="@Model.Url" target="_blank">@Model.Url<i class="fa fa-external-link right"></i></a>
                }
                @Html.ImproveThis(m => m.Url)
            </div>
        </div>
        <div class="detail-group">
            <strong>Rss Feed</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    @Html.Raw(string.Join("", Model.Feeds.Select(s => string.Format(@"<li><a href=""{1}"">{0}</a> - <span class=""release-date"">{2}</span></li>", s.Url, s.Url, s.UpdatedDate.FormatDate()))))
                    <li>
                        @Html.Raw(Model.Feeds.Count > 0 ? "" : "".FormatString())
                        <div>
                            @Html.ImproveThis(m => m.Feeds, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new rss feed")
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div class="detail-group">
            <strong>Glossary</strong>
            <div>
                <ul class="list-unstyled no-margin">
                    @Html.Raw(string.Join("", Model.Glossaries.Select(s => string.Format(@"<li>{0} - {1}</li>", s.Raw, s.Final))))
                    <li>
                        @Html.Raw(Model.Glossaries.Count > 0 ? "" : "".FormatString())
                        <div>
                            @Html.ImproveThis(m => m.Glossaries, customHtmlIcon: @"<i class=""fa fa-plus-circle""></i>Add new glossary")
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="subheader">
        <h2 class="title">Releases</h2>
        </div>
    <div class="content section">
        @{
            Html.RenderPartial("~/Views/Release/_Release.cshtml", new PagedList<ReleaseGrid>
            {
                Data = Model.Releases.Select(s => new ReleaseGrid
                {
                    ReleaseID = s.ReleaseID,
                    Title = s.Title,
                    Date = s.Date,
                    Url = s.Url,

                }).ToList()
            });
        }

    </div>



</section>
