@using Paranovels.Common
@using Paranovels.DataModels
@using Paranovels.ViewModels
@using Thi.Core
@model InlineEditForm<GroupDetail>
@{
    Layout = null;
}
<div id="@(Model.InlineEditProperty)Container" class="inline-editor">
    <form id="@(Model.InlineEditProperty)Form" method="post" action="@Url.Action("Form")" enctype="multipart/form-data">
        <div class="form-group">
            @if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Status))
            {
                <fieldset class="form-control">
                    <legend class="sr-only">Status</legend>
                    @foreach (var status in R.GroupStatus.Translate)
                    {
                        <label class="radio-inline">
                            <input id="status-@status.Key" type="radio" name="@Model.InlineEditProperty" value="@status.Key" required>
                            @status.Value
                        </label>
                    }
                </fieldset>
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.ImageUrl))
            {
                <label>
                    <input type="file" name="image" required />
                </label>
                <input type="hidden" name="ImagePath" value="/Fanslations/Groups/@Model.Model.Name" />
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.About))
            {
                <label for="@Model.InlineEditProperty" class="sr-only">@Model.InlineEditProperty</label>
                <textarea id="@Model.InlineEditProperty" class="form-control" rows="2" name="@Model.InlineEditProperty" required></textarea>

            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Feeds))
            {
                var feed = new Feed();
                <label for="@Model.InlineEditProperty" class="sr-only">Rss Feed Url</label>
                <input id="@Model.InlineEditProperty" type="url" class="form-control" name="@(Model.InlineEditProperty)[0].@feed.PropertyName(m=>m.Url)" required />
            }
            else if (Model.InlineEditProperty == Model.PropertyName(m => m.Model.Glossaries))
            {
                var glossary = new GlossaryForm();
                <label>
                    <input type="text" class="form-control" name="@(Model.InlineEditProperty)[0].@(glossary.PropertyName(m=>m.Raw))" required />
                </label>
                <label>
                    <input type="text" class="form-control" name="@(Model.InlineEditProperty)[0].@(glossary.PropertyName(m=>m.Final))" required />
                </label>
                <label>
                    <textarea class="form-control" rows="2" name="@(Model.InlineEditProperty)[0].@(glossary.PropertyName(m=>m.Definition))" required></textarea>
                </label>
            }
            else if (Model.InlineEditProperty.Contains("Url"))
            {
                <label>
                    <input type="url" class="form-control" name="@Model.InlineEditProperty" required />
                </label>
            }
            else
            {
                <label>
                    <input type="text" class="form-control" name="@Model.InlineEditProperty" required />
                </label>
            }
        </div>
        <div class="hidden">
            <input type="hidden" name="ID" value="@Model.ID" />
            <input type="hidden" name="InlineEditProperty" value="@Model.InlineEditProperty" />
        </div>
        <div class="form-group clearfix">
            <button id="@(Model.InlineEditProperty)Submit" type="submit" class="btn btn-primary"><i class="fa fa-save"></i>Save</button>

            <button id="@(Model.InlineEditProperty)Cancel" type="button" class="btn btn-default"><i class="fa fa-times-circle"></i>Cancel</button>
        </div>
    </form>
</div>