@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
// ViewBag.Title = "Home Page";
}

@section js {
    <script>
        window.pnHooks.push(function() {
            require(['jquery', 'angular'], function($, angular) {
                'use strict';

                angular
                    .module('transApp', [])
                    .controller('TransController', TransController)
                    .factory('translationService', translationService)
                    .factory('segmentationService', segmentationService)
                    .directive('paraTranslation', paraTranslation);

                TransController.$inject = ['$scope', 'translationService', 'segmentationService'];

                function TransController($scope, translationService, segmentationService) {
                    var vm = this;

                    vm.chapter = {
                        title: '',
                        content: ''
                    };
                    vm.paragraph = {};
                    vm.originalSegments = [];
                    vm.translatedSegments = [];

                    vm.segment = segment;
                    vm.translate = translate;
                    vm.update = update;
                    vm.editing = editing;
                    vm.close = close;

                    function segment() {
                        vm.originalSegments = segmentationService.segment(vm.chapter.content);
                        vm.translatedSegments = segmentationService.segment(vm.chapter.content);
                        //console.log(vm.segments);
                        angular.forEach(vm.originalSegments, function(segment) {
                            segment.isTranslating = true;
                        });
                    };

                    function translate(p, event) {
                        vm.paragraph.top = event.currentTarget.offsetTop;
                        vm.paragraph.text = p.text;
                        vm.paragraph.isTranslating = true;
                        p.isTranslating = vm.paragraph.isTranslating;
                        console.log('translate', p, event);
                    }

                    function editing(p, event) {
                        angular.forEach(vm.originalSegments, function(segment) {
                            segment.isTranslating = false;
                        });

                        p.isTranslating = true;
                        vm.paragraph = p;

                        console.log('editing', p, event);
                    }

                    function update(p, event) {
                        angular.forEach(vm.originalSegments, function(segment) {
                            segment.isTranslating = true;
                        });

                        var translated = vm.translatedSegments[p.line];
                        translated.text = event.currentTarget.innerText;
                        //vm.paragraph = null;
                        console.log('update', p, event);
                    }

                    function close() {
                        console.log('close');
                    }
                };

                segmentationService.$inject = ['$http'];

                function segmentationService($http) {
                    var service = {
                        segment: segment
                    };
                    return service;

                    function segment(text) {
                        var segments = [];
                        var paragraphs = text.split('\n');
                        for (var i = 0; i < paragraphs.length; i++) {
                            segments.push({
                                line: i,
                                text: paragraphs[i]
                            });
                        }
                        return segments;
                    };

                };

                translationService.$inject = ['$http', '$q'];

                function translationService($http, $q) {
                    var service = {
                        translate: translate
                    };
                    return service;

                    function translate(translator, text, from, to) {
                        var deferred = $q.defer();
                        var http = null;
                        if (translator == 'Google')
                            http = googleTranslate(text, from, to);
                        if (translator == 'Bing')
                            http = bingTranslate(text, from, to);

                        if (http != null) {
                            http.success(function(responseData) { deferred.resolve(responseData); })
                        } else {
                            deferred.reject('Failed to translate');
                        }
                        return deferred.promise;
                    };

                    function googleTranslate(text, from, to) {
                        console.log('googleTranslate', text, from, to);

                        return $http.post('/translating/googletranslator', { text: text, from: from, to: to }, {
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
                        });
                    };

                    function bingTranslate(text, from, to) {
                        console.log('bingTranslate', text, from, to);
                        return $http.post('/translating/bingtranslator', $.param({ text: text, from: from, to: to }), {
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
                        });
                    };
                };

                paraTranslation.$inject = ['translationService'];

                function paraTranslation(translationService) {
                    var directive = {
                        //compile: function (element, attr) {
                        //    console.log(scope, el, attr, ctrl);
                        //    element.find('a').attr('ng-click', 'close()');
                        //    element.find('a').click(function () {
                        //        console.log('a clicked start', scope);
                        //        close();
                        //        console.log('a clicked end', scope);
                        //    })
                        //},
                        restrict: 'A',
                        //transclude: true,
                        templateUrl: "/translating/angularviews/translator",
                        scope: {
                            paragraph: '='
                        },
                        controller: function($scope) {
                            console.log('controller', $scope);

                            $scope.translator = '';
                            $scope.translatedText = '';
                            $scope.close = close;
                            $scope.translate = translate;

                            initialize();

                            function initialize() {
                                console.log('initialize', $scope);
                                $scope.translate('Google');
                            }

                            function close() {
                                //$scope.$broadcast('close');
                                console.log('close');
                                $scope.paragraph.isTranslating = false;
                            }

                            function translate(translator) {
                                $scope.translator = translator;
                                translationService.translate($scope.translator, $scope.paragraph.text, "vi", "en")
                                    .then(function(data) {
                                            $scope.translatedText = data;
                                        },
                                        function(data) {
                                            $scope.translatedText = data;
                                        });
                            };
                        },
                        link: function(scope, element, attr, ctrl) {
                            console.log('link', scope, element, attr, ctrl);
                            //if (scope.paragraph.text == '') {
                            //    element.addClass('hidden');
                            //}
                            element.css({
                                'background-color': '#efefef',
                                'width': '100%',
                                'border': '1px solid red',
                                //'position': 'absolute',
                                //'top': 110,
                                //'zindex': 999,
                                'transition': 'all 1s linear'

                            });

                            scope.$on('close', function(e) {
                                scope.paragraph.isTranslating = false;
                                console.log('on close');
                            });

                            scope.$watch('paragraph', function(val) {
                                var changes = {
                                    top: (angular.element('#p' + (val.line)).position() || { top: 400 }).top - 20 + 'px',
                                }
                                console.log('watch paragraph', val, changes, element, angular.element('#p' + (val.line)).position());
                                //element.css();
                                element.css(changes);
                                //console.log('css before', element.css());
                                //element.position({
                                //    "my": "center",
                                //    "at": "center",
                                //    "of": "#p"+val.line
                                //});
                                //console.log('css', element.css());
                            }, true);

                        }
                    };
                    return directive;


                }
                // bootstrap angularjs
                angular.bootstrap($('#transApp'), ['transApp']);
            }); // end require4

        }); // end pnHook
    </script>
}

<div id="transApp">
    <h1>Translate</h1>
    <form class="form-horizontal" ng-controller="TransController as vm" ng-init="vm.step = 1">
        <div id="entry" ng-show="vm.step == 1">
            <div class="form-group">
                <label id="labeltitle" for="title" class="col-xs-12">Title:</label>
                <div class="col-xs-12">
                    <input id="title" name="title" type="text" class="input-sm form-control" ng-model="vm.chapter.title" placeholder="Enter title" aria-labelledby="labeltitle">
                </div>
            </div>
            <div class="form-group">
                <label for="content" class="col-xs-12">Content</label>
                <div class="col-xs-12">
                    <textarea id="content" name="content" class="form-control input-sm" rows="20" ng-model="vm.chapter.content" placeholder="Enter content"></textarea>
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 text-right">
                    <button type="button" class="btn btn-sm" ng-click="vm.segment(); vm.step = 2">Next</button>
                </div>
            </div>
        </div>
        <div id="translate" ng-show="vm.step == 2" style="position: relative;">

            <div id="translator" class="animated bounceIn" para-translation paragraph="vm.paragraph" ng-show="vm.paragraph"></div>


            <div ng-repeat="p in vm.originalSegments" class="clearfix" ng-click2="vm.translate(p, $event)" ng-show="p.isTranslating">
                <p id={{'p'+p.line}} ng-keyup22="vm.update(p, $event)" ng-focus="vm.editing(p, $event)" ng-blur="vm.update(p, $event)" contenteditable="true">{{p.text}}</p>
            </div>
            <div class="form-group">
                <div class="col-xs-12 text-right">
                    <button type="button" class="btn btn-sm" ng-click="vm.step = 1">Back</button>
                </div>
            </div>
        </div>
        <div id="review">
            <h2>orginal</h2>
            <p ng-repeat="p in vm.originalSegments">
                {{p.text}}
            </p>
            <h2>translated</h2>
            <p ng-repeat="p in vm.translatedSegments">
                {{p.text}}
            </p>
        </div>
    </form>
</div>